generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Organization {
  id   String @id @default(uuid())
  name String

  membership  Membership[]
  invitations OrganizationInvitation[]
  competitors Competitor[]

  @@map(name: "organization")
}

enum MembershipRole {
  OWNER
  ADMIN
  USER
}

model Membership {
  id   String         @id @default(uuid())
  role MembershipRole @default(USER)

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User?   @relation(fields: [userId], references: [id])
  userId String?

  // Customer calls for a given user (membership)
  customerCall CustomerCall[]

  @@unique([organizationId, userId])
  @@map(name: "memberships")
}

// The owners of the SaaS (you) can have a SUPERADMIN role to access all data
enum GlobalRole {
  SUPERADMIN
  CUSTOMER
}

model User {
  id        String     @id @default(uuid())
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")
  name      String?
  email     String     @unique
  role      GlobalRole @default(CUSTOMER)

  memberships Membership[]
  invitation  OrganizationInvitation?

  @@map(name: "users")
}

model OrganizationInvitation {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique

  @@map(name: "organization_invitations")
}

enum CustomerCallProvider {
  ZOOM
}

model CustomerCall {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  title     String

  eventId        String               @unique @map("event_id")
  provider       CustomerCallProvider?
  timezone       String
  scheduledAt    DateTime             @map("scheduled_at")
  scheduledEndAt DateTime             @map("scheduled_end_at")
  data           Json
  organizer      Membership           @relation(fields: [organizerId], references: [id])
  organizerId    String
  note           CallNote?

  cancelled     Boolean @default(false)

  @@map(name: "customer_calls")
}

model CallNote {
  id      String @id @default(uuid())
  content String

  customerCall   CustomerCall @relation(fields: [customerCallId], references: [id])
  customerCallId String       @unique

  @@map(name: "customer_call_note")
}

enum BotCallStatus {
  MARKED_FOR_SCHEDULE
  SCHEDULED
  RUNNING
  FINISHED
  FAILED
}

model BotCall {
  id             String               @id @default(uuid())
  createdAt      DateTime             @default(now()) @map("created_at")
  updatedAt      DateTime             @updatedAt @map("updated_at")
  provider       CustomerCallProvider
  data           Json
  organizer      String
  timezone       String
  scheduledAt    DateTime             @map("scheduled_at")
  scheduledEndAt DateTime             @map("scheduled_end_at")
  idempotencyKey String               @map("idempotency_key")

  callId String        @unique
  status BotCallStatus

  @@map(name: "bot_calls")
}

model Competitor {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  name      String   @unique

  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  battlecard     Battlecard?

  @@map(name: "competitors")
}

model Battlecard {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  content   String

  competitor   Competitor @relation(fields: [competitorId], references: [id])
  competitorId String     @unique

  @@map(name: "battlecards")
}

model PlaybookTemplate {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  title          String
  content        String
  organizationId String

  @@map(name: "playbook_templates")
}

model Playbook {
  id             String   @id @default(uuid())
  createdAt      DateTime @default(now()) @map("created_at")
  updatedAt      DateTime @updatedAt @map("updated_at")
  title          String
  content        String
  organizationId String
  customerCallId String

  @@map(name: "playbooks")
}

model GoogleCalendarIntegration {
  membershipId  String @id @unique
  refreshToken  String
  nextSyncToken String?

  @@map(name: "google_calendar_integrations")
}

model GoogleEventsNotificationChannel {
  id             String   @id @default(uuid())
  membershipId   String
  resourceId     String
  expiresAt      DateTime

  @@map(name: "google_events_notification_channel")
}
